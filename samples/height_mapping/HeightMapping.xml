<?xml version='1.0'?>

<effect>
  <include name="lighting.xml"/>
  <shader type="vertex_shader" name="HeightMappingVS">
    <attrib  name="pos" usage="position"/>
    <attrib  name="normal" usage="normal"/>
    <attrib  name="texCoord" usage="texture_coord"/>
    <attrib  name="tangent"  usage="tangent"/>
    <attrib  name="bitangent" usage="bitangent"/>
    <uniform type="mat4" name="model"/>
    <uniform type="mat4" name="proj_view"/>
    <uniform type="vec3" name="light_pos"/>
    <uniform type="vec3" name="eye_pos"/>
    <code>
      <![CDATA[
in vec3 pos;
in vec2 texCoord;
in vec3 normal;
in vec3 tangent;
in vec3 bitangent;

uniform mat4 model;
uniform mat4 proj_view;
uniform vec3 light_pos;
uniform vec3 eye_pos;

out vec4 Light_vec;
out vec4 View_vec;
out vec3 Half_vec;
out mat3 TBN;

void main()
{
  vec4 world_pos = model * vec4(pos, 1.0f);
  gl_Position = proj_view * world_pos;
  
  vec3 light_vec = light_pos - world_pos.xyz;
  vec3 view_vec = eye_pos - world_pos.xyz;
  vec3 half_vec = normalize(light_vec) + normalize(view_vec);
  
   vec3 T = normalize(vec3(model * vec4(tangent,   0.0)));
   vec3 B = normalize(vec3(model * vec4(bitangent, 0.0)));
   vec3 N = normalize(vec3(model * vec4(normal,    0.0)));
   TBN = transpose(mat3(T, B, N));
   
   Light_vec.xyz =  TBN * light_vec;
   View_vec.xyz = TBN * view_vec;
   Half_vec = TBN * half_vec;
   
   Light_vec.w = texCoord.x;
   View_vec.w = texCoord.y;
}
      ]]>
    </code>
  </shader>

  <shader type="fragment_shader" name="HeightMappingFS">
    <header  name="LightingFunc"/>
    <uniform type="sampler" name="diffuse_tex">
      <state name="filtering" value="min_mag_linear_mip_nearest"/>
      <state name="address_u" value="wrap"/>
      <state name="address_v" value="wrap"/>
      <state name="address_w" value="clamp"/>
    </uniform>
    <uniform type="sampler" name="height_tex" copy="diffuse_tex"/>
    <uniform type="sampler" name="normal_tex" copy="diffuse_tex"/>
    
    <uniform type="vec3" name="light_falloff"/>
    <uniform type="vec3" name="light_color"/>
    <code>
      <![CDATA[
in vec4 Light_vec;
in vec4 View_vec;
in vec3 Half_vec;
in mat3 TBN;

uniform sampler2D height_tex;
uniform sampler2D diffuse_tex;
uniform sampler2D normal_tex;

uniform vec3 light_falloff;
uniform vec3 light_color;

out vec4 OutColor;

vec4 HeightMappingShading(vec3 light_vec, vec3 view_vec, vec3 half_vec, vec3 diffuse, vec3 normal)
{
  float atten = AttenuationTerm(vec3(0), -light_vec, light_falloff);
  light_vec = normalize(light_vec);
  half_vec = normalize(half_vec);
  return vec4(atten * light_color * CalcBRDFShading(diffuse, vec3(0.2f), 16.0f, light_vec, half_vec, normal), 1);
}

void main() {
  vec2 tex_coord = vec2(Light_vec.w, View_vec.w);

  vec3 view = normalize(View_vec.xyz);
  
  float scale = 0.02;
  float bais = -0.01;
  vec2 texUV = tex_coord + view.xy * texture(height_tex, tex_coord).r * scale + bais;
  
  
  vec3 diffuse = texture(diffuse_tex, texUV.xy).rgb;
  vec3 normal = normalize((255.0f / 128.0f * texture(normal_tex, texUV).xyz - 1));
  OutColor = HeightMappingShading(Light_vec.xyz, View_vec.xyz, Half_vec, diffuse, normal);
}
		]]>
    </code>
  </shader>

  <technique name="HeightMapping">
    <state name="vertex_shader" value="HeightMappingVS"/>
    <state name="fragment_shader" value="HeightMappingFS"/>
  </technique>
</effect>

