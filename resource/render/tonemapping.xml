<?xml version='1.0'?>

<effect>
  
  <shader type="vertex_shader" name="TonemapVS">
    <attrib name="pos" usage="position"/>
    <attrib name="uv" usage="texture_coord"/>
    <code>
      <![CDATA[
in vec3 pos;
in vec2 uv;

out vec2 UV;

void main()
{
  gl_Position = vec4(pos, 1.0f);
  UV = uv;
}
      ]]>
    </code>
  </shader>

  <shader type="fragment_shader" name="TonemapWithGlareFS">
    <uniform type="sampler" name="scene_tex"/>
      <state name="filtering" value="min_mag_linear_mip_nearest"/>
      <state name="address_u" value="clamp"/>
      <state name="address_v" value="clamp"/>
    <uniform type="sampler" name="lum_tex" copy="scene_tex"/>
    <uniform type="sampler" name="glare_tex" copy="scene_tex"/>
    <uniform type="float" name="exposure"/>
    <uniform type="float" name="gamma"/>
    <code>
      <![CDATA[
in vec2 UV;
uniform sampler2D scene_tex;
uniform sampler2D lum_tex;
uniform sampler2D glare_tex;
uniform float exposure;
uniform float gamma;

out vec4 FragColor;

const float W = 11.2;
const float exposure_bias = 1.0;

vec3 filmicTonemapping(vec3 x)
{
const float A = 0.15;
const float B = 0.50;
const float C = 0.10;
const float D = 0.20;
const float E = 0.02;
const float F = 0.30;
  return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}
float vignette(vec2 pos, float inner, float outer)
{
  float r = length(pos);
  r = 1.0 - smoothstep(inner, outer, r);
  return r;
}
void main()
{
  vec4 scene_color = texture(scene_tex, UV);
  float lum = texture(lum_tex, UV).r;
  vec3 color = scene_color.rgb * exposure / lum;
  vec4 glare_color = texture(glare_tex, UV);
  color = mix(color, glare_color.rgb, 0.33f);
  
  color = color * vignette(UV * 2.0 - 1.0, 0.55, 1.5);
  color = filmicTonemapping(exposure_bias * color);
  vec3 white_scale = 1.0f / filmicTonemapping(vec3(W, W, W));
  color = color * white_scale;
  color.r = pow(color.r, gamma);
  color.g = pow(color.g, gamma);
  color.b = pow(color.b, gamma);
  FragColor = vec4(color, 1.0f);
}

//void main()
//{
//	const float A = 2.51f;
//	const float B = 0.03f;
//	const float C = 2.43f;
//	const float D = 0.59f;
//	const float E = 0.14f;
//  vec4 scene_color = texture(scene_tex, UV);
//  vec4 glare_color = texture(glare_tex, UV);
//  float lum = texture(lum_tex, UV).r;
//  vec3 color = mix(scene_color.rgb, glare_color.rgb, 0.33f);
//  color = color / lum * 0.6f;
//  
//  color.r += exposure * 0.001;
//  color = color * vignette(UV * 2.0 - 1.0, 0.55, 1.5);
//  color = (color * (A * color + B)) / (color * (C * color + D) + E);
//  color.r = pow(color.r, gamma);
//  color.g = pow(color.g, gamma);
//  color.b = pow(color.b, gamma);
//  FragColor = vec4(color, 1.0f);
//}
      ]]>
    </code>
  </shader>

  <shader type="fragment_shader" name="TonemapFS">
    <uniform type="sampler" name="scene_tex"/>
    <uniform type="sampler" name="lum_tex"/>
    <uniform type="float" name="exposure"/>
    <uniform type="float" name="gamma"/>
    <code>
      <![CDATA[
in vec2 UV;
uniform sampler2D scene_tex;
uniform sampler2D lum_tex;
uniform float exposure;
uniform float gamma;

out vec4 FragColor;

const float W = 11.2;
const float exposure_bias = 1.0;

vec3 filmicTonemapping(vec3 x)
{
const float A = 0.15;
const float B = 0.50;
const float C = 0.10;
const float D = 0.20;
const float E = 0.02;
const float F = 0.30;
  return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}
float vignette(vec2 pos, float inner, float outer)
{
  float r = length(pos);
  r = 1.0 - smoothstep(inner, outer, r);
  return r;
}
//void main()
//{
//  vec4 scene_color = texture(scene_tex, UV);
//  float lum = texture(lum_tex, UV).r;
//  vec3 color = scene_color.rgb * (exposure * 0.0001 + 1.6f) / lum;
//  color = color * vignette(UV * 2.0 - 1.0, 0.55, 1.5);
//  color = filmicTonemapping(exposure_bias * color);
//  vec3 white_scale = 1.0f / filmicTonemapping(vec3(W, W, W));
//  color = color * white_scale;
//  color.r = pow(color.r, gamma);
//  color.g = pow(color.g, gamma);
//  color.b = pow(color.b, gamma);
//  FragColor = vec4(color, 1.0f);
//}

void main()
{
	const float A = 2.51f;
	const float B = 0.03f;
	const float C = 2.43f;
	const float D = 0.59f;
	const float E = 0.14f;
  vec4 scene_color = texture(scene_tex, UV);
  float lum = texture(lum_tex, UV).r;
  vec3 color = (scene_color.rgb) / lum * 0.6f;
  color.r += exposure * 0.001;
  color = color * vignette(UV * 2.0 - 1.0, 0.55, 1.5);
  color = (color * (A * color + B)) / (color * (C * color + D) + E);
  color.r = pow(color.r, gamma);
  color.g = pow(color.g, gamma);
  color.b = pow(color.b, gamma);
  FragColor = vec4(color, 1.0f);
}
      ]]>
    </code>
  </shader>

  <technique name="TomemappingTech">
    <state name="depth_enable" value="false"/>
    <state name="depth_write_mask" value="0"/>

    <state name="vertex_shader" value="TonemapVS"/>
    <state name="fragment_shader" value="TonemapFS"/>
  </technique>

  <technique name="TonemappingWithGlareTech">
    <state name="depth_enable" value="false"/>
    <state name="depth_write_mask" value="0"/>

    <state name="vertex_shader" value="TonemapVS"/>
    <state name="fragment_shader" value="TonemapWithGlareFS"/>
  </technique>

</effect>