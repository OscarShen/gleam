<?xml version='1.0'?>

<effect>

  <shader type="header" name="LightingFunc">
    <code>
      <![CDATA[
      
#define MAX_SHININESS 8192.0f
      
float DistributionTerm(vec3 halfway_vec, vec3 normal, float shininess)
{
	return exp((shininess + 0.775f) * (max(dot(halfway_vec, normal), 0.0f) - 1));
}
      
float SpecularNormalizeFactor(float shininess)
{
	return (shininess + 2) / 8;
}

vec3 FresnelTerm(vec3 light_vec, vec3 halfway_vec, vec3 c_spec)
{
	float e_n = clamp(dot(light_vec, halfway_vec), 0.0f, 1.0f);
	return any(greaterThan(c_spec, vec3(0.0f))) ? c_spec + (vec3(1.0f) - c_spec) * exp2(-(5.55473f * e_n + 6.98316f) * e_n) : vec3(0);
}
      
vec3 SpecularTerm(vec3 c_spec, vec3 light_vec, vec3 halfway_vec, vec3 normal, float shininess)
{
	return SpecularNormalizeFactor(shininess) * DistributionTerm(halfway_vec, normal, shininess)
		* FresnelTerm(light_vec, halfway_vec, c_spec);
}
      
// diffuse only
vec3 CalcBRDFShading(vec3 c_diff, vec3 l, vec3 n)
{
	return max(c_diff * dot(n, l), 0);
}

// diffuse + specular
vec3 CalcBRDFShading(vec3 c_diff, vec3 c_spec, float shininess, vec3 l, vec3 h, vec3 n)
{
  return max((c_diff + SpecularTerm(c_spec, l, h, n, shininess)) * dot(n, l), 0);
}

// Metalness
vec3 DiffuseColor(vec3 albedo, float metalness)
{
  return albedo * (1 - metalness);
}

vec3 SpecularColor(vec3 albedo, float metalness)
{
  return mix(vec3(0.04), albedo, metalness);
}

// Glossiness

float Shininess2Glossiness(float shininess)
{
	return log2(shininess) / log2(MAX_SHININESS);
}

float Glossiness2Shininess(float glossiness)
{
	return pow(MAX_SHININESS, glossiness);
}
      ]]>
    </code>
  </shader>
</effect>

